
import streamlit as st
import google.generativeai as genai
from datetime import datetime
from streamlit_pills import pills

from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA
from dotenv import load_dotenv
import os
import requests


# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

# Load environment variables from .env file
load_dotenv()


## LLM
def get_llm():
    model_id = 'mistralai/mixtral-8x7b-instruct-v01'
    parameters = {
        GenParams.MAX_NEW_TOKENS: 256,
        GenParams.TEMPERATURE: 0.5,
    }
    project_id = os.getenv("WATSONX_PROJECT_ID")

    # Load the API key from the environment variable
    api_key = os.getenv("WATSONX_APIKEY")

    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url="https://us-south.ml.cloud.ibm.com",
        project_id=project_id,
        apikey=api_key,  # Pass the API key here
        params=parameters,
    )
    return watsonx_llm


## Document loader
def document_loader(file_path):
    loader = PyPDFLoader(file_path)
    loaded_document = loader.load()
    return loaded_document


## Text splitter
def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=50,
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks



## Embedding model
def watsonx_embedding():

    project_id = os.getenv("WATSONX_PROJECT_ID")

    embed_params = {
        EmbedTextParamsMetaNames.TRUNCATE_INPUT_TOKENS: 3,
        EmbedTextParamsMetaNames.RETURN_OPTIONS: {"input_text": True},
    }
    watsonx_embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        url="https://us-south.ml.cloud.ibm.com",
        project_id=project_id,
        params=embed_params,
    )
    return watsonx_embedding



## Vector db
def vector_database(chunks):
    embedding_model = watsonx_embedding()
    vectordb = Chroma.from_documents(chunks, embedding_model)
    return vectordb


## Retriever
def retriever(file_path):
    loaded_document = document_loader(file_path)
    chunks = text_splitter(loaded_document)
    vectordb = vector_database(chunks)
    retriever = vectordb.as_retriever()
    return retriever


## QA Chain
def retriever_qa(file_path, query):
    llm = get_llm()
    retriever_obj = retriever(file_path)
    qa = RetrievalQA.from_chain_type(llm=llm,
                                    chain_type="stuff",
                                    retriever=retriever_obj,
                                    return_source_documents=False)
    response = qa.run(query)
    return response


def show_page():
    # Streamlit UI
    st.title("RAG Chatbot")
    st.write("Ask any question about Hongmei. The chatbot will try to answer using the document.")

    # Load the PDF document from the data directory
    pdf_path = "data/resume.pdf"

    # Query Input Textbox
    query_question = st.text_input("Ask your question here:")

    if query_question:
        try:
            # Fetch result using retriever_qa
            with st.spinner('Processing your request...'):
                result = retriever_qa(pdf_path, query_question)
            st.success('Done!')

            # Display the result in a textbox
            st.text_area("Response:", value=result, height=200)
        except ValueError as ve:
            st.error(f"Value Error: {str(ve)}")
        except FileNotFoundError:
            st.error("The document file was not found. Please check the path.")
        except Exception as e:
            st.error(f"An unexpected issue occurred: {str(e)}")






